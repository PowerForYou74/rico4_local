name: Deploy Rico System

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}
        
    - name: Deploy to Server
      run: |
        # SSH-Verbindung zum Server herstellen
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          
          echo "üöÄ Rico System Deploy gestartet..."
          
          # In Projektverzeichnis wechseln
          cd /opt/rico4
          
          # Git Pull (falls Repository bereits existiert)
          if [ -d .git ]; then
            echo "üì• Repository wird aktualisiert..."
            git pull origin main
          else
            echo "‚ùå Repository nicht gefunden. Bitte manuell klonen:"
            echo "git clone <your-repo-url> /opt/rico4"
            exit 1
          fi
          
          # Deploy Script ausf√ºhren
          echo "üöÄ Deploy Script wird ausgef√ºhrt..."
          bash deploy/deploy.sh
          
          echo "‚úÖ Deploy abgeschlossen!"
        EOF
        
    - name: Health Check
      run: |
        # Warten bis Services gestartet sind
        sleep 30
        
        # Health Check via SSH
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          echo "üè• Health Check wird durchgef√ºhrt..."
          
          # Backend Health Check
          if curl -f http://localhost:8000/health/quick > /dev/null 2>&1; then
            echo "‚úÖ Backend ist gesund"
          else
            echo "‚ùå Backend Health Check fehlgeschlagen"
            docker compose logs backend
            exit 1
          fi
          
          # Frontend Health Check
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "‚úÖ Frontend ist erreichbar"
          else
            echo "‚ö†Ô∏è Frontend Health Check fehlgeschlagen"
          fi
          
          echo "üìä Service Status:"
          docker compose ps
        EOF
        
    - name: Notify Success
      if: success()
      run: |
        echo "üéâ Deploy erfolgreich abgeschlossen!"
        echo "üåê Services verf√ºgbar:"
        echo "- Backend: http://${{ secrets.SSH_HOST }}:8000"
        echo "- Frontend: http://${{ secrets.SSH_HOST }}:3000"
        echo "- n8n: http://${{ secrets.SSH_HOST }}:5678"
        
    - name: Notify Failure
      if: failure()
      run: |
        echo "‚ùå Deploy fehlgeschlagen!"
        echo "Bitte Logs pr√ºfen und manuell eingreifen."
